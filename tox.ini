[tox]
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    lint
    all-deps
    min-deps


[testenv]
# This avoids rebuilding and installing all rust dependencies
# which is especially useful for local testing.
skip_install = True
# TODO: Allow for using usedevelop by adjusting setup.py
# usedevelop = True
passenv =
    RASCALINE_BUILD_TYPE
    RUSTUP_HOME
    CARGO*

deps =
    numpy
    equistore @ https://github.com/m-stack-org/equistore/archive/b8a65fa.zip
    discover
    coverage

extra_deps =
    ase
    chemfiles


[testenv:lint]
# lint the Python code with flake8 (code linter), black (code formatter), and
# isort (sorting of imports)
deps =
    flake8
    flake8-bugbear
    black
    isort
commands =
    flake8 {toxinidir}/python {toxinidir}/setup.py
    black --check --diff {toxinidir}/python {toxinidir}/setup.py
    isort --check-only --diff {toxinidir}/python {toxinidir}/setup.py


[testenv:all-deps]
# Run Python unit tests with all dependencies installed (ase & chemfiles are
# optional dependencies)
deps =
    {[testenv]deps}
    {[testenv]extra_deps}
allowlist_externals =
    bash
commands =
    bash -c "rm -rf dist && python setup.py --quiet bdist_wheel && pip install --force-reinstall --no-deps ./dist/rascaline-*.whl"
    coverage run --source={envsitepackagesdir}/rascaline -m unittest discover -p "*.py" -s python/tests
    coverage xml -o .tox/coverage.xml


[testenv:min-deps]
# Run Python unit tests with the minimal dependencies installed
deps = {[testenv]deps}
allowlist_externals =
    bash
commands =
    bash -c "rm -rf dist && python setup.py --quiet bdist_wheel && pip install --force-reinstall --no-deps ./dist/rascaline-*.whl"
    python -m unittest discover -p "*.py" -s python/tests


[testenv:docs]
deps =
    {[testenv]deps}
    -r docs/requirements.txt
allowlist_externals =
    bash
commands =
    bash -c "rm -rf dist && python setup.py --quiet bdist_wheel && pip install --force-reinstall --no-deps ./dist/rascaline-*.whl"

    bash -c "rm -rf docs/src/examples"
    sphinx-build {posargs:-E} -W -b html docs/src docs/build/html


[testenv:build-python]
# Make sure we can build sdist and a wheel for python
deps =
    setuptools
    wheel
    twine

allowlist_externals =
    bash

commands =
    # check building sdist and wheels from a checkout
    python setup.py sdist
    python setup.py bdist_wheel
    twine check dist/*.tar.gz
    twine check dist/*.whl

    # check building wheels from the sdist
    bash -c "pip wheel --verbose dist/rascaline-*.tar.gz -w dist/test"


[testenv:format]
# Abuse tox to do actual formatting. Users can call `tox -e format` to run
# formatting on all files
deps =
    black
    isort
commands =
    black {toxinidir}/python {toxinidir}/setup.py
    isort {toxinidir}/python {toxinidir}/setup.py
